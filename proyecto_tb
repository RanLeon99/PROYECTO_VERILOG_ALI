$date
	Sun Feb 26 17:50:10 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module proyecto_tb $end
$var wire 4 ! out [3:0] $end
$var wire 1 " cout $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$var reg 1 & enable $end
$var reg 1 ' sel0 $end
$var reg 1 ( sel1 $end
$var reg 1 ) sel2 $end
$scope module uut $end
$var wire 4 * a [3:0] $end
$var wire 4 + and_out [3:0] $end
$var wire 4 , b [3:0] $end
$var wire 1 % cin $end
$var wire 1 & enable $end
$var wire 4 - nand_out [3:0] $end
$var wire 4 . nor_out [3:0] $end
$var wire 4 / or_out [3:0] $end
$var wire 4 0 salida_5 [3:0] $end
$var wire 4 1 salida_6 [3:0] $end
$var wire 4 2 salida_7 [3:0] $end
$var wire 1 ' sel0 $end
$var wire 1 ( sel1 $end
$var wire 1 ) sel2 $end
$var wire 4 3 s_out [3:0] $end
$var wire 4 4 out [3:0] $end
$var wire 1 " cout $end
$var wire 1 5 cin3 $end
$var wire 1 6 cin2 $end
$var wire 1 7 cin1 $end
$scope module adder_bit0 $end
$var wire 1 8 a $end
$var wire 1 9 and1 $end
$var wire 1 : b $end
$var wire 1 % cin $end
$var wire 1 7 cout $end
$var wire 1 ; or1 $end
$var wire 1 < out $end
$upscope $end
$scope module adder_bit1 $end
$var wire 1 = a $end
$var wire 1 > and1 $end
$var wire 1 ? b $end
$var wire 1 7 cin $end
$var wire 1 6 cout $end
$var wire 1 @ or1 $end
$var wire 1 A out $end
$upscope $end
$scope module adder_bit2 $end
$var wire 1 B a $end
$var wire 1 C and1 $end
$var wire 1 D b $end
$var wire 1 6 cin $end
$var wire 1 5 cout $end
$var wire 1 E or1 $end
$var wire 1 F out $end
$upscope $end
$scope module adder_bit3 $end
$var wire 1 G a $end
$var wire 1 H and1 $end
$var wire 1 I b $end
$var wire 1 5 cin $end
$var wire 1 " cout $end
$var wire 1 J or1 $end
$var wire 1 K out $end
$upscope $end
$scope module mux $end
$var wire 4 L a [3:0] $end
$var wire 4 M b [3:0] $end
$var wire 4 N c [3:0] $end
$var wire 4 O d [3:0] $end
$var wire 4 P e [3:0] $end
$var wire 1 & enable $end
$var wire 4 Q f [3:0] $end
$var wire 4 R g [3:0] $end
$var wire 4 S h [3:0] $end
$var wire 1 ' sel0 $end
$var wire 1 ( sel1 $end
$var wire 1 ) sel2 $end
$var wire 4 T out [3:0] $end
$scope module mux_0 $end
$var wire 1 U a $end
$var wire 1 V b $end
$var wire 1 W c $end
$var wire 1 X d $end
$var wire 1 Y e $end
$var wire 1 & enable $end
$var wire 1 Z f $end
$var wire 1 [ g $end
$var wire 1 \ h $end
$var wire 1 ] or_ab $end
$var wire 1 ^ or_abc $end
$var wire 1 _ or_abcd $end
$var wire 1 ` or_abcde $end
$var wire 1 a or_abcdef $end
$var wire 1 b or_abcdefg $end
$var wire 1 c out $end
$var wire 1 d out_ina0 $end
$var wire 1 e out_ina1 $end
$var wire 1 f out_ina2 $end
$var wire 1 g out_inaen $end
$var wire 1 h out_inb0 $end
$var wire 1 i out_inb1 $end
$var wire 1 j out_inb2 $end
$var wire 1 k out_inben $end
$var wire 1 l out_inc0 $end
$var wire 1 m out_inc1 $end
$var wire 1 n out_inc2 $end
$var wire 1 o out_incen $end
$var wire 1 p out_ind0 $end
$var wire 1 q out_ind1 $end
$var wire 1 r out_ind2 $end
$var wire 1 s out_inden $end
$var wire 1 t out_ine0 $end
$var wire 1 u out_ine1 $end
$var wire 1 v out_ine2 $end
$var wire 1 w out_ineen $end
$var wire 1 x out_inf0 $end
$var wire 1 y out_inf1 $end
$var wire 1 z out_inf2 $end
$var wire 1 { out_infen $end
$var wire 1 | out_ing0 $end
$var wire 1 } out_ing1 $end
$var wire 1 ~ out_ing2 $end
$var wire 1 !" out_ingen $end
$var wire 1 "" out_inh0 $end
$var wire 1 #" out_inh1 $end
$var wire 1 $" out_inh2 $end
$var wire 1 %" out_inhen $end
$var wire 1 ' sel0 $end
$var wire 1 ( sel1 $end
$var wire 1 ) sel2 $end
$upscope $end
$scope module mux_1 $end
$var wire 1 &" a $end
$var wire 1 '" b $end
$var wire 1 (" c $end
$var wire 1 )" d $end
$var wire 1 *" e $end
$var wire 1 & enable $end
$var wire 1 +" f $end
$var wire 1 ," g $end
$var wire 1 -" h $end
$var wire 1 ." or_ab $end
$var wire 1 /" or_abc $end
$var wire 1 0" or_abcd $end
$var wire 1 1" or_abcde $end
$var wire 1 2" or_abcdef $end
$var wire 1 3" or_abcdefg $end
$var wire 1 4" out $end
$var wire 1 5" out_ina0 $end
$var wire 1 6" out_ina1 $end
$var wire 1 7" out_ina2 $end
$var wire 1 8" out_inaen $end
$var wire 1 9" out_inb0 $end
$var wire 1 :" out_inb1 $end
$var wire 1 ;" out_inb2 $end
$var wire 1 <" out_inben $end
$var wire 1 =" out_inc0 $end
$var wire 1 >" out_inc1 $end
$var wire 1 ?" out_inc2 $end
$var wire 1 @" out_incen $end
$var wire 1 A" out_ind0 $end
$var wire 1 B" out_ind1 $end
$var wire 1 C" out_ind2 $end
$var wire 1 D" out_inden $end
$var wire 1 E" out_ine0 $end
$var wire 1 F" out_ine1 $end
$var wire 1 G" out_ine2 $end
$var wire 1 H" out_ineen $end
$var wire 1 I" out_inf0 $end
$var wire 1 J" out_inf1 $end
$var wire 1 K" out_inf2 $end
$var wire 1 L" out_infen $end
$var wire 1 M" out_ing0 $end
$var wire 1 N" out_ing1 $end
$var wire 1 O" out_ing2 $end
$var wire 1 P" out_ingen $end
$var wire 1 Q" out_inh0 $end
$var wire 1 R" out_inh1 $end
$var wire 1 S" out_inh2 $end
$var wire 1 T" out_inhen $end
$var wire 1 ' sel0 $end
$var wire 1 ( sel1 $end
$var wire 1 ) sel2 $end
$upscope $end
$scope module mux_2 $end
$var wire 1 U" a $end
$var wire 1 V" b $end
$var wire 1 W" c $end
$var wire 1 X" d $end
$var wire 1 Y" e $end
$var wire 1 & enable $end
$var wire 1 Z" f $end
$var wire 1 [" g $end
$var wire 1 \" h $end
$var wire 1 ]" or_ab $end
$var wire 1 ^" or_abc $end
$var wire 1 _" or_abcd $end
$var wire 1 `" or_abcde $end
$var wire 1 a" or_abcdef $end
$var wire 1 b" or_abcdefg $end
$var wire 1 c" out $end
$var wire 1 d" out_ina0 $end
$var wire 1 e" out_ina1 $end
$var wire 1 f" out_ina2 $end
$var wire 1 g" out_inaen $end
$var wire 1 h" out_inb0 $end
$var wire 1 i" out_inb1 $end
$var wire 1 j" out_inb2 $end
$var wire 1 k" out_inben $end
$var wire 1 l" out_inc0 $end
$var wire 1 m" out_inc1 $end
$var wire 1 n" out_inc2 $end
$var wire 1 o" out_incen $end
$var wire 1 p" out_ind0 $end
$var wire 1 q" out_ind1 $end
$var wire 1 r" out_ind2 $end
$var wire 1 s" out_inden $end
$var wire 1 t" out_ine0 $end
$var wire 1 u" out_ine1 $end
$var wire 1 v" out_ine2 $end
$var wire 1 w" out_ineen $end
$var wire 1 x" out_inf0 $end
$var wire 1 y" out_inf1 $end
$var wire 1 z" out_inf2 $end
$var wire 1 {" out_infen $end
$var wire 1 |" out_ing0 $end
$var wire 1 }" out_ing1 $end
$var wire 1 ~" out_ing2 $end
$var wire 1 !# out_ingen $end
$var wire 1 "# out_inh0 $end
$var wire 1 ## out_inh1 $end
$var wire 1 $# out_inh2 $end
$var wire 1 %# out_inhen $end
$var wire 1 ' sel0 $end
$var wire 1 ( sel1 $end
$var wire 1 ) sel2 $end
$upscope $end
$scope module mux_3 $end
$var wire 1 &# a $end
$var wire 1 '# b $end
$var wire 1 (# c $end
$var wire 1 )# d $end
$var wire 1 *# e $end
$var wire 1 & enable $end
$var wire 1 +# f $end
$var wire 1 ,# g $end
$var wire 1 -# h $end
$var wire 1 .# or_ab $end
$var wire 1 /# or_abc $end
$var wire 1 0# or_abcd $end
$var wire 1 1# or_abcde $end
$var wire 1 2# or_abcdef $end
$var wire 1 3# or_abcdefg $end
$var wire 1 4# out $end
$var wire 1 5# out_ina0 $end
$var wire 1 6# out_ina1 $end
$var wire 1 7# out_ina2 $end
$var wire 1 8# out_inaen $end
$var wire 1 9# out_inb0 $end
$var wire 1 :# out_inb1 $end
$var wire 1 ;# out_inb2 $end
$var wire 1 <# out_inben $end
$var wire 1 =# out_inc0 $end
$var wire 1 ># out_inc1 $end
$var wire 1 ?# out_inc2 $end
$var wire 1 @# out_incen $end
$var wire 1 A# out_ind0 $end
$var wire 1 B# out_ind1 $end
$var wire 1 C# out_ind2 $end
$var wire 1 D# out_inden $end
$var wire 1 E# out_ine0 $end
$var wire 1 F# out_ine1 $end
$var wire 1 G# out_ine2 $end
$var wire 1 H# out_ineen $end
$var wire 1 I# out_inf0 $end
$var wire 1 J# out_inf1 $end
$var wire 1 K# out_inf2 $end
$var wire 1 L# out_infen $end
$var wire 1 M# out_ing0 $end
$var wire 1 N# out_ing1 $end
$var wire 1 O# out_ing2 $end
$var wire 1 P# out_ingen $end
$var wire 1 Q# out_inh0 $end
$var wire 1 R# out_inh1 $end
$var wire 1 S# out_inh2 $end
$var wire 1 T# out_inhen $end
$var wire 1 ' sel0 $end
$var wire 1 ( sel1 $end
$var wire 1 ) sel2 $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
1=#
0<#
0;#
1:#
09#
08#
07#
16#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
1)#
1(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
1l"
0k"
0j"
1i"
0h"
0g"
0f"
1e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
1W"
1V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
1E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
1:"
09"
08"
07"
16"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
1*"
1)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
1l
0k
0j
1i
0h
0g
0f
1e
1d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
1X
1W
0V
1U
b0 T
b0 S
b0 R
b0 Q
b10 P
b1011 O
b1101 N
b100 M
b1 L
0K
1J
0I
0H
1G
0F
0E
1D
1C
1B
0A
0@
0?
0>
0=
1<
1;
1:
09
08
07
06
15
b0 4
b1 3
b0 2
b0 1
b0 0
b1101 /
b10 .
b1011 -
b101 ,
b100 +
b1100 *
0)
0(
0'
1&
0%
b101 $
b1100 #
1"
b0 !
$end
#20
0d
0l
0E"
0l"
0=#
1p
1A"
1h"
1A#
1'
#40
0e
0i
06"
0:"
0e"
0i"
06#
0:#
1d
1l
1E"
1l"
1=#
1m
1q
1>"
1B"
1m"
1q"
1>#
1B#
0p
0A"
0h"
0A#
1(
0'
#60
0d
0l
0E"
0l"
0=#
1p
1A"
1h"
1A#
1'
#80
1d
1l
1E"
1l"
1=#
1u
1y
1F"
1J"
1u"
1y"
1F#
1J#
0m
0q
0>"
0B"
0m"
0q"
0>#
0B#
0p
0A"
0h"
0A#
1)
0(
0'
#100
0d
0l
0E"
0l"
0=#
1p
1A"
1h"
1A#
1'
#120
0u
0y
0F"
0J"
0u"
0y"
0F#
0J#
1d
1l
1E"
1l"
1=#
1}
1#"
1N"
1R"
1}"
1##
1N#
1R#
0p
0A"
0h"
0A#
1(
0'
#140
0d
0l
0E"
0l"
0=#
1p
1A"
1h"
1A#
1'
#160
